{"version":3,"sources":["components/Form.js","components/Table.js","components/Portfolio.js","index.js"],"names":["handleChange","handleSubmit","post","onSubmit","name","type","value","onChange","quanitity","purchasedate","APItoken","Table","props","state","rows","stocks","oldStocks","apifetched1","apifetched2","currentValue2","convert","dollar","currency","allValue","apiFetch","bind","refresh","currencySelect","totalPortfolioValue","this","totalValue","quantity","latestPrice","toFixed","newdata","symbol","purchaseValue","close","setState","concat","map","row","i","key","onClick","removeRow","fetch","then","res","json","data","catch","console","log","addRows","length","splice","tempValue","parseFloat","buttonPressed","className","React","Component","StockTables","e","target","prevState","handleInputChange","event","preventDefault","Form","buttonreset","Portfolio","portfolioName","deleted","RemovePortfolio","CreatePortfolio","portfolios","showComponent","placeholder","portfolio","index","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb7cbf8e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n//Input form for the stocks\r\nexport default ({ handleChange, handleSubmit, post}) =>{\r\n        return (\r\n            <form onSubmit= {handleSubmit}>\r\n                <label>\r\n                    Stock name:\r\n                    <input name=\"name\" type=\"text\" value={post.name} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                    Stock quantity:\r\n                    <input name=\"quantity\" type=\"number\" value={post.quanitity} onChange={handleChange} />\r\n                </label>\r\n                <label>\r\n                {/* Date input only valid as YYYYMMDD */}\r\n                    Stock purchase date:\r\n                    <input name=\"purchasedate\" type=\"text\" value={post.purchasedate} onChange={handleChange} />\r\n                </label>\r\n                <input type=\"submit\" value=\"Add Stock\"/>\r\n            </form>\r\n        );\r\n    }\r\n\r\n","import React from \"react\";\r\nimport Form from \"./Form.js\"\r\nconst APItoken = \"Tpk_bb33d8b9dfec4e11b6ec94cff09d5685\";\r\n\r\n//Handles everything that has to do with the table\r\nclass Table extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            rows: this.props.rows,\r\n            stocks: [],\r\n            oldStocks: [],\r\n            apifetched1: false,\r\n            apifetched2: false,\r\n            currentValue2: \"\",\r\n            // convert is used for exchange rate it is changed in currencySelect() to 0.89 if the currency is change to Euro    \r\n            convert: 1,\r\n            dollar: false,\r\n            currency: \"Dollar\",\r\n            allValue: 0,\r\n        };\r\n        this.apiFetch = this.apiFetch.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n        this.currencySelect = this.currencySelect.bind(this);\r\n        this.totalPortfolioValue = this.totalPortfolioValue.bind(this);\r\n    }\r\n\r\n    //Adds a new row to the array with all the information fetched from the API\r\n    addRows() {\r\n        if (this.state.apifetched1 && this.state.apifetched1) {\r\n            //.toFixed(2) rounds the numbers to display correctly as money\r\n            var totalValue =\r\n                (this.props.post.quantity * this.state.stocks.latestPrice * this.state.convert).toFixed(2);\r\n\r\n            if (typeof this.state.oldStocks !== \"undefined\") {\r\n                var newdata = {\r\n                    name: this.state.stocks.symbol,\r\n                    value: (this.state.stocks.latestPrice * this.state.convert).toFixed(2),\r\n                    quantity: this.props.post.quantity,\r\n                    totalPortfolioValue: totalValue,\r\n                    purchaseValue: this.state.oldStocks.close,\r\n                };\r\n            //incase the input date isn't available the purchase value will be displayed as 0\r\n            } else {\r\n                newdata = {\r\n                    name: this.state.stocks.symbol,\r\n                    value: this.state.stocks.latestPrice,\r\n                    quantity: this.props.post.quantity,\r\n                    totalPortfolioValue: totalValue,\r\n                    purchaseValue: \"0\",\r\n                };\r\n            }\r\n\r\n            //concatenates the new data into the rows array which is used to build the table.\r\n            this.setState({ rows: this.state.rows.concat(newdata) });\r\n        }\r\n    }\r\n    //Adds all information to the correct cell in the table in the current row with the array.map \r\n    rows() {\r\n        return this.state.rows.map((row, i) => {\r\n            return (\r\n                <tr key={i}>\r\n                    <td>{row.name}</td>\r\n                    <td>{(row.value)}</td>\r\n                    <td>{row.quantity}</td>\r\n                    <td>{(row.quantity*row.value).toFixed(2)}</td>\r\n                    <td>{row.purchaseValue}</td>\r\n                    {/* Adds a button to each row with the current row's key to be able to remove the row */}\r\n                    <td><button onClick={() => {this.removeRow({i})}}>Remove Row</button></td>\r\n                </tr>\r\n            );\r\n        });\r\n    }\r\n    //Does two API fetches, one for current data and one for historical data, these are applied to the initial version of the table\r\n    apiFetch() {\r\n        fetch(\r\n            \"https://sandbox.iexapis.com/beta/stock/\" +\r\n                this.props.post.name +\r\n                \"/quote/?token=\" +\r\n                APItoken +\r\n                \"&period=annual\"\r\n        )\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                this.setState({ stocks: data }, () => {\r\n                    this.setState({ apifetched1: true });\r\n                });\r\n            })\r\n            .catch(console.log);\r\n        \r\n            /*Purchasedate is directly input into the API fetch rather than being checked to see if it is correct, \r\n            this can lead to no data being gain from this API call.*/\r\n        fetch(\r\n            \"https://sandbox.iexapis.com/stable/stock/\" +\r\n                this.props.post.name +\r\n                \"/chart/date/\" +\r\n                this.props.post.purchasedate +\r\n                \"?chartByDay=true&token=\" +\r\n                APItoken +\r\n                \"&period=annual\"\r\n        )\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                this.setState({ oldStocks: data[0] }, () => {\r\n                    this.setState({ apifetched2: true });\r\n                    this.addRows();\r\n                });\r\n            })\r\n            .catch(console.log);\r\n    }\r\n  \r\n    //Does a API call to update the current value of all stocks in a table\r\n    async refresh(){\r\n        this.setState({allValue:0})\r\n        //For-loop is used here because array.map didn't work for some reason\r\n        for (var i=0; i< this.state.rows.length; i++){\r\n            await fetch( \r\n                \"https://sandbox.iexapis.com/beta/stock/\" +this.state.rows[i].name+\"/quote/?token=\" + APItoken +\"&period=annual\")\r\n                .then(res => res.json())\r\n                .then(data =>{\r\n                    this.setState({ currentValue2: data }, () => {\r\n                        this.state.rows[i].value = (this.state.currentValue2.latestPrice * this.state.convert).toFixed(2);\r\n                        this.state.rows[i].totalValue = (this.state.currentValue2.latestPrice * this.state.rows[i].quantity * this.state.convert).toFixed(2);\r\n                        this.totalPortfolioValue();                    \r\n                    });\r\n                })\r\n                .catch(console.log);\r\n        }\r\n    }\r\n\r\n    //Changes the convert amount between euro and dollar then calls refresh to update the table\r\n    currencySelect(){\r\n        if (this.state.dollar){\r\n            this.setState({convert: 1, dollar: false, currency: \"Dollar\" },\r\n                () => {this.refresh()});\r\n        }\r\n        else{\r\n            this.setState({convert:0.89, dollar: true, currency: \"Euro\"}, \r\n                () => {this.refresh()});\r\n        }\r\n       \r\n    }\r\n    //Splices the selected row to remove it from the array of rows. \r\n    removeRow(i){         \r\n        var rows = [...this.state.rows];\r\n        rows.splice(i.i, 1);\r\n        this.setState({rows});\r\n    }\r\n\r\n\r\n    //Calculates the value of all stocks based on the totalValue\r\n    totalPortfolioValue(){\r\n        this.setState({allValue:0});\r\n        var tempValue;\r\n        return this.state.rows.map((row, i) => {\r\n            tempValue = parseFloat(row.totalValue)\r\n            if(typeof tempValue === \"number\"){\r\n                    this.setState({allValue:this.state.allValue+tempValue})              \r\n            }\r\n            \r\n        });        \r\n    }\r\n\r\n    //Renders a table with an API lookup if buttonPressed === True, otherwise without the API lookup\r\n    //buttonPressed === True when the Add Stock button has been pressed, and a new stock is added to the table\r\n    render() {\r\n        if (this.props.buttonPressed) {\r\n            return (\r\n                <div className=\"stock-table\">\r\n                    {this.apiFetch()}\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Value</th>\r\n                                <th>Quantity</th>\r\n                                <th>Total Value</th>\r\n                                <th>Purchase Value</th>\r\n                                <th>Number</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>{this.rows()}</tbody>\r\n                    </table>\r\n                </div>\r\n            );\r\n        } else\r\n            return (\r\n                <div className=\"stock-table\">\r\n                    <button onClick={this.refresh}>Refresh</button>\r\n                    <button onClick={this.currencySelect}>Switch currency</button>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Value</th>\r\n                                <th>Quantity</th>\r\n                                <th>Total Value</th>\r\n                                <th>Purchase Value</th>\r\n                                <th>Number</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>{this.rows()}</tbody>\r\n                    </table>\r\n                    <h3>Currency:{this.state.currency}</h3>\r\n                    <h3>Total Value of all stocks: {this.state.allValue.toFixed(2)}</h3>\r\n                </div>\r\n            );\r\n    }\r\n}   \r\n\r\nclass StockTables extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            post: {\r\n                name: \"\",\r\n                quantity: null,\r\n                purchasedate: \"\"\r\n            },\r\n            rows:[],\r\n            buttonPressed: false\r\n        }\r\n        this.handleInputChange =this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange = e => {\r\n        const { name, value } = e.target;\r\n    \r\n        this.setState(prevState => ({\r\n          post: { ...prevState.post, [name]: value }\r\n        }));\r\n      };\r\n \r\n    \r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        this.setState({buttonPressed: true});\r\n    }\r\n\r\n    buttonreset(){\r\n        if(this.state.buttonPressed){\r\n            this.setState({buttonPressed: false});\r\n        }\r\n        \r\n    }\r\n    //Handles the stock input form and stock table\r\n    render() {\r\n        return (   \r\n            <div className=\"App\">\r\n                <Form \r\n                    handleChange = {this.handleChange}\r\n                    post={this.state.post}\r\n                    handleSubmit={this.handleSubmit}\r\n                />\r\n                <Table\r\n                    post = { this.state.post } \r\n                    quantity = {this.state.post.quantity} \r\n                    oldStocks = {this.state.oldStocks}\r\n                    rows = {this.state.rows}\r\n                    buttonPressed = {this.state.buttonPressed} />\r\n                {this.buttonreset()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StockTables","import React from \"react\";\r\nimport StockTables from \"./Table.js\";\r\n\r\n//Handles a portfolio and its removal\r\nclass Portfolio extends React.Component{\r\n   constructor(props){\r\n        super(props);\r\n        this.state={\r\n            portfolioName:this.props.portfolioName,\r\n            deleted:false\r\n        }\r\n\r\n        this.RemovePortfolio = this.RemovePortfolio.bind(this);\r\n    }\r\n    RemovePortfolio(){\r\n        this.setState({deleted:true});\r\n    }\r\n\r\n    render(){\r\n        //Checks if the remove portfolio button has been pressed and returns null if it has removing the portfolio\r\n        if(!this.state.deleted){\r\n            return (\r\n                <div className=\"portfolio col-6 col-s-12\">\r\n                    <h1>{this.state.portfolioName}</h1>\r\n                    <StockTables />\r\n                    <button onClick={this.RemovePortfolio}>Remove!</button>       \r\n                </div>\r\n            );   \r\n        }\r\n        else return null;\r\n        \r\n        \r\n    }\r\n}\r\n//Handles the input of portfolio name\r\nclass CreatePortfolio extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            value: \"\",\r\n            portfolios: [],\r\n            showComponent: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(event){\r\n        this.setState({value: event.target.value});\r\n    }\r\n    handleSubmit(event){\r\n        \r\n        event.preventDefault();\r\n        this.setState({\r\n            portfolios:this.state.portfolios.concat(<Portfolio portfolioName={this.state.value}/>)});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div className=\"Col-12\">\r\n                <form onSubmit={this.handleSubmit} >    \r\n                    <input type=\"text\" value={this.state.value} onChange={this.handleChange} placeholder=\"Enter portfolio title\" />\r\n                    <input type=\"submit\" value=\"Add New Portfolio\" />\r\n                </form>      \r\n               \r\n               {this.state.portfolios.map((portfolio, index) => <Portfolio key={index} portfolioName={this.state.value}/>)}   \r\n               </div>\r\n        )   \r\n    }\r\n}\r\nexport default CreatePortfolio","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport CreatePortfolio from \"./components/Portfolio.js\"\r\n\r\n/* TODO:\r\nWhen submitting Form add new row to Table ✔\r\nAdd table to a portfolio\r\nRemove row from Table\r\nMake portfolios addable and removable\r\nMake Graph show\r\n */\r\n\r\n\r\nclass App extends React.Component {\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"App\">                 \r\n                <CreatePortfolio />\r\n            </div>\r\n           \r\n        )\r\n    }\r\n}\r\nexport default App;\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}